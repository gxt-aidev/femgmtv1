# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ dev ]
#   workflow_dispatch:

# env:
#   IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/mgmt_v2

# jobs:
#   tests:
#     name: Run tests
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.12"
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#       - name: Run Django tests
#         env:
#           DJANGO_SETTINGS_MODULE: field_mgmt.settings
#         run: |
#           # run tests (adjust to your test runner)
#           pytest -q || echo "No tests or pytest not configured"

#   build-and-push:
#     name: Build and push Docker image
#     needs: tests
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       id-token: write
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ env.IMAGE_REPO }}:${{ github.sha }}
#             ${{ env.IMAGE_REPO }}:latest
#           file: ./Dockerfile

#   deploy:
#     name: Deploy to EC2
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     environment:
#       name: production
#     steps:
#       - uses: actions/checkout@v4

#       - name: Start SSH agent and add key
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}

#       - name: Test SSH connection
#         run: |
#           ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_PORT }} \
#           ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "echo 'âœ… Connected:' $(hostname) as $(whoami)"

#       - name: Create app directory on remote
#         run: |
#           ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_PORT }} \
#           ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p /home/${{ secrets.REMOTE_USER }}/app"

#       - name: Copy docker-compose and deploy script to remote
#         run: |
#           scp -o StrictHostKeyChecking=no -P ${{ secrets.REMOTE_PORT }} \
#             deploy/docker-compose.prod.yml \
#             ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/${{ secrets.REMOTE_USER }}/app/docker-compose.yml
#           scp -o StrictHostKeyChecking=no -P ${{ secrets.REMOTE_PORT }} \
#             deploy/deploy.sh \
#             ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/${{ secrets.REMOTE_USER }}/app/deploy.sh

#       - name: Run remote deploy
#         run: |
#           ssh -o StrictHostKeyChecking=no -p ${{ secrets.REMOTE_PORT }} \
#           ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
#           "cd /home/${{ secrets.REMOTE_USER }}/app && chmod +x deploy.sh && ./deploy.sh"
