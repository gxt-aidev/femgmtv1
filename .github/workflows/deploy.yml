name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Build and Push to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
              IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/mgmt_v2
              VERSION_TAG=${GITHUB_SHA::7}   # short commit hash (7 chars)

              # Build with version and latest
              docker build -t $IMAGE_NAME:$VERSION_TAG -t $IMAGE_NAME:latest .

              # Push both tags
              docker push $IMAGE_NAME:$VERSION_TAG
              docker push $IMAGE_NAME:latest

              echo "IMAGE_TAG=$VERSION_TAG" >> $GITHUB_ENV


      # Deploy to EC2
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/mgmt_v2:latest

            # Pull latest image
            docker pull $IMAGE_NAME

            # Stop and remove old container
            docker stop mgmt_app || true
            docker rm mgmt_app || true

            # Run migrations in a temporary container
            docker run --rm \
              -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
              -e DJANGO_ALLOWED_HOSTS="13.62.67.73,localhost" \
              $IMAGE_NAME python manage.py migrate --fake

            # Start new container
            docker run -d -p 8000:8000 --name mgmt_app \
              -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
              -e DJANGO_ALLOWED_HOSTS="13.62.67.73,localhost" \
              $IMAGE_NAME

              # Clean up unused images/layers
              docker system prune -af --volumes || true

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "CI/CD Deployment Status"
          body: |
            âœ… Deployment Completed Successfully

            Branch: ${{ github.ref }}
            Environment: AWS EC2
            Application URL: http://13.62.67.73:8000

            The latest changes have been deployed, and the application is now live. 
            Please verify the functionality and monitor for any issues.

            Regards,
            DevOps CI/CD Pipeline
          to: "amitrikhari011@gmail.com"
          from: "techyink011@gmail.com"

